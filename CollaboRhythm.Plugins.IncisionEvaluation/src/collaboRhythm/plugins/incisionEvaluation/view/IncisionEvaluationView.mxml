<?xml version="1.0"?>
<!---
  - Copyright 2012 John Moore, Scott Gilroy
  -
  - This file is part of CollaboRhythm.
  -
  - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  - version.
  -
  - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  - details.
  -
  - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  - <http://www.gnu.org/licenses/>.
  -->
<tablet:TabletViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:tablet="collaboRhythm.shared.view.tablet.*" xmlns:mx="library://ns.adobe.com/flex/mx"
					   fontSize="26" title="Incision Evaluation">

	<mx:Panel title="Please evaluate your incision areas." paddingTop="150" paddingLeft="150"
			horizontalAlign="center" backgroundColor="0xd3d3d3" borderColor="0xd3d3d3">
<!--		<s:layout>
			<s:VerticalLayout horizontalAlign="center"
							  paddingLeft="100" paddingTop="100"/>
		</s:layout>-->

		<mx:Form backgroundColor="0xd3d3d3" borderColor="0xd3d3d3" paddingTop="150" paddingLeft="150">
			<!--<mx:FormHeading label="Please evaluate your incision areas."/>-->

			<mx:FormItem label="Are you experiencing redness?">
				<s:ToggleSwitch id="rednessIndicatorToggleSwitch" skinClass="spark.skins.mobile.ToggleSwitchSkin"
						change="RednessIndicatorToggleSwitch_changeHandler(event)"/>
			</mx:FormItem>

			<mx:FormItem label="HowRed?" visible="{_model.showRednessDetails}" includeInLayout="{_model.showRednessDetails}">

			</mx:FormItem>

			<mx:FormItem label="Size:" direction="horizontal" visible="{_model.showRednessDetails}"
						 includeInLayout="{_model.showRednessDetails}">
				<s:TextInput id="rednessWidthTextInput" skinClass="spark.skins.mobile.StageTextInputSkin" width="100"
							 textAlign="right" restrict="0-9" softKeyboardType="number"/>
				<s:Label text="mm"/>
				<s:Label text="by"/>
				<s:TextInput id="rednessHeightTextInput" skinClass="spark.skins.mobile.StageTextInputSkin" width="100"
							 textAlign="right" restrict="0-9" softKeyboardType="number"/>
				<s:Label text="mm"/>
			</mx:FormItem>

			<mx:FormItem label="Color:" visible="{_model.showRednessDetails}" includeInLayout="{_model.showRednessDetails}">
				<s:SpinnerListContainer width="150" height="100" skinClass="spark.skins.mobile.SpinnerListContainerSkin">
					<s:SpinnerList id="rednessIndicatorSpinnerList" labelField="color" dataProvider="{rednessIndicatorArrayCollection}"
								   skinClass="spark.skins.mobile.SpinnerListSkin" width="100%"/>
				</s:SpinnerListContainer>
			</mx:FormItem>
			
			<mx:FormItem label="Do you have any tenderness?">
				<s:ToggleSwitch id="tendernessIndicatorToggleSwitch" skinClass="spark.skins.mobile.ToggleSwitchSkin"
								change="tendernessIndicatorToggleSwitch_changeHandler(event)"/>
			</mx:FormItem>
			
			<!--<mx:FormItem>
				<mx:HSlider id="tendernessIndicatorHSlider" minimum="1" maximum="10" value="1" dataTipPlacement="bottom"
				            snapInterval="1" tickInterval="1" labels="['1','5','10']" allowTrackClick="true"
				            liveDragging="true" change="tendernessIndicatorHSlider_changeHandler(event)"/>
			</mx:FormItem>-->

			<mx:FormItem label="Do you have any discharge?">
				<s:ToggleSwitch id="dischargeIndicatorToggleSwitch" skinClass="spark.skins.mobile.ToggleSwitchSkin"
								change="dischargeIndicatorToggleSwitch_changeHandler(event)"/>
			</mx:FormItem>

			<mx:FormItem label="What kind?" direction="vertical" visible="{_model.showDischargeDetails}"
						 includeInLayout="{_model.showDischargeDetails}">
				<s:CheckBox id="dischargePussCheckBox" label="Puss" skinClass="spark.skins.spark.CheckBoxSkin"
						change="dischargePussCheckBox_changeHandler(event)"/>
				<s:CheckBox id="dischargeBloodCheckBox" label="Blood" skinClass="spark.skins.spark.CheckBoxSkin"
										change="dischargeBloodCheckBox_changeHandler(event)"/>
			</mx:FormItem>
		</mx:Form>
	</mx:Panel>

<!--	<s:VGroup paddingLeft="100" paddingTop="100">
		<s:HGroup verticalAlign="baseline">
			<s:Label text="Redness"/>
			<s:CheckBox id="rednessCheckBox" label="Yes" skinClass="spark.skins.spark.CheckBoxSkin" change="rednessCheckBox_changeHandler(event)"/>
		</s:HGroup>
		<s:HGroup id="sizeGroup" verticalAlign="baseline" visible="{_model.showRednessDetails}" includeInLayout="{_model.showRednessDetails}">
			<s:Label text="Size"/>
			<s:TextInput skinClass="spark.skins.mobile.StageTextInputSkin" width="200"
						 textAlign="right" restrict="0-9" softKeyboardType="number"/>
			<s:Label text="mm"/>
			<s:Label text="by"/>
			<s:TextInput skinClass="spark.skins.mobile.StageTextInputSkin" width="200"
						 textAlign="right" restrict="0-9" softKeyboardType="number"/>
			<s:Label text="mm"/>
		</s:HGroup>
		<s:HGroup visible="{_model.showRednessDetails}" includeInLayout="{_model.showRednessDetails}">
			<s:Label text="How Red?"/>
			<s:SpinnerListContainer width="150" height="100" skinClass="spark.skins.mobile.SpinnerListContainerSkin">
				<s:SpinnerList labelField="color" dataProvider="{rednessIndicatorArrayCollection}"
						skinClass="spark.skins.mobile.SpinnerListSkin" width="100%"/>
			</s:SpinnerListContainer>
			<s:DropDownList id="rednessIndicatorDropDownList" dataProvider="{rednessColor}" labelField="label" width="200"
					prompt="Select Color" change="rednessIndicatorDropDownList_changeHandler(event)" skinClass="spark.skins.spark.DropDownListSkin"/>
		</s:HGroup>
	</s:VGroup>-->

	<fx:Declarations>
		<s:ArrayCollection id="rednessIndicatorArrayCollection">
			<fx:Object color="pink"/>
			<fx:Object color="light red"/>
			<fx:Object color="dark red"/>
		</s:ArrayCollection>
	</fx:Declarations>

	<fx:Script><![CDATA[
		import collaboRhythm.plugins.incisionEvaluation.controller.IncisionEvaluationAppController;
		import collaboRhythm.plugins.incisionEvaluation.model.IncisionEvaluationModel;

		import mx.collections.ArrayCollection;
		import mx.events.SliderEvent;

		private var _controller:IncisionEvaluationAppController;

		[Bindable]
		private var _model:IncisionEvaluationModel;
		private var rednessColor:ArrayCollection = new ArrayCollection([
			{label:"Pink", data:1},
			{label:"Light Red", data:2},
			{label:"Dark Red", data:3}
		]);

		override public function set data(value:Object):void
		{
			super.data = value;
			_controller = value as IncisionEvaluationAppController;
			_model = _controller.model;
		}

/*		private function rednessCheckBox_changeHandler(event:Event):void
		{
			if (_controller != null)
			{
				_controller.updateHasRedness(rednessIndicatorToggleSwitch.selected);
			}
		}*/

		private function RednessIndicatorToggleSwitch_changeHandler(event:Event):void
		{
			if (_controller)
			{
				_controller.updateHasRedness(rednessIndicatorToggleSwitch.selected);
			}
		}

		private function tendernessIndicatorToggleSwitch_changeHandler(event:Event):void
		{
			if (_controller)
			{
				_controller.updateHasTenderness(tendernessIndicatorToggleSwitch.selected);
			}
		}

		private function tendernessIndicatorHSlider_changeHandler(event:SliderEvent):void
		{
		}

		private function dischargeIndicatorToggleSwitch_changeHandler(event:Event):void
		{
			if (_controller)
			{
				_controller.updateHasDischarge(dischargeIndicatorToggleSwitch.selected);
			}
		}

		private function dischargePussCheckBox_changeHandler(event:Event):void
		{
		}

		private function dischargeBloodCheckBox_changeHandler(event:Event):void
		{
		}
		]]></fx:Script>
</tablet:TabletViewBase>
